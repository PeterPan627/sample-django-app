import React$1, { PureComponent } from 'react';
import { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { FeaturesContext } from '../../../../utilities/features/context.js';
import styles from '../../Tabs.scss.js';
import { Item as Item$1 } from '../Item/Item.js';

class List extends PureComponent {
  constructor(...args) {
    super(...args);
    this.context = void 0;

    this.handleKeypress = event => {
      const {
        onKeyPress = noop
      } = this.props;
      onKeyPress(event);
    };
  }

  render() {
    const {
      focusIndex,
      disclosureTabs,
      onClick = noop
    } = this.props;
    const tabs = disclosureTabs.map((_ref, index) => {
      let {
        id,
        content
      } = _ref,
          tabProps = _objectWithoutProperties(_ref, ["id", "content"]);

      return /*#__PURE__*/React$1.createElement(Item$1, Object.assign({}, tabProps, {
        key: id,
        id: id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content);
    });
    return /*#__PURE__*/React$1.createElement("ul", {
      className: styles.List,
      onKeyDown: handleKeyDown,
      onKeyUp: this.handleKeypress
    }, tabs);
  }

}
List.contextType = FeaturesContext;

function noop() {}

function handleKeyDown(event) {
  const {
    key
  } = event;

  if (key === 'ArrowLeft' || key === 'ArrowRight') {
    event.preventDefault();
    event.stopPropagation();
  }
}

export { List };
